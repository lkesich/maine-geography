window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "mainegeo", "modulename": "mainegeo", "kind": "module", "doc": "<h1 id=\"mainegeo\">mainegeo</h1>\n\n<p>mainegeo is Python library for parsing and normalizing Maine place name data, including complex multi-part reporting units from election results.</p>\n\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n\n<ul>\n<li><a href=\"#license-and-usage\">License and Usage</a></li>\n<li><a href=\"#documentation\">Documentation</a></li>\n<li><a href=\"#installation\">Installation</a></li>\n</ul>\n\n<h2 id=\"license-and-usage\">License and Usage</h2>\n\n<p>Usage of this library is governed by\nan <a href=\"https://github.com/lkesich/maine-geography/blob/main/LICENSE\">MIT license</a>.</p>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p>Review the <a href=\"https://lkesich.github.io/maine-geography/\">documentation</a>.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<h3 id=\"install-from-github\">Install from Github</h3>\n\n<p>You can install the most recent release by running: <code>pip install git+https://github.com/lkesich/maine-geography.git</code>.</p>\n\n<p>See individual module documentation for detailed information.</p>\n"}, {"fullname": "mainegeo.elections", "modulename": "mainegeo.elections", "kind": "module", "doc": "<p>Functions for parsing Maine Secretary of State election reporting units.</p>\n\n<h6 id=\"the-maine-sos-uses-reporting-units-that-provide-the-following-challenges-for-parsing\">The Maine SoS uses reporting units that provide the following challenges for parsing:</h6>\n\n<blockquote>\n  <ol>\n  <li>Reporting units may be composed of one or several towns.</li>\n  <li>Reporting units may include a non-reporting registration town.</li>\n  <li>Reporting units may include an unspecified group of all townships that register at a\n  particular town, or in a particular county.</li>\n  <li>Delimiters, indicators of reporting vs. registration, and indicators of township aliases\n  are not standard over time.</li>\n  </ol>\n</blockquote>\n\n<p>This module provides functions for parsing Maine election result strings into consistent objects, \nextracting reporting and registration towns, and standardizing the format of unspecified town groups.</p>\n\n<p>Most functions in this module can be run on a delimited result string containing multiple towns,\nor a list of multiple towns.</p>\n"}, {"fullname": "mainegeo.elections.ResultString", "modulename": "mainegeo.elections", "qualname": "ResultString", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "mainegeo.elections.ResultString.__init__", "modulename": "mainegeo.elections", "qualname": "ResultString.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">raw_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "mainegeo.elections.ResultString.raw_string", "modulename": "mainegeo.elections", "qualname": "ResultString.raw_string", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "mainegeo.elections.ResultString.normalized_string", "modulename": "mainegeo.elections", "qualname": "ResultString.normalized_string", "kind": "variable", "doc": "<p>Result string with capitalization, whitespace and delimiters normalized.</p>\n\n<p>Typos found in the <code>mainegeo.patterns.KNOWN_TYPOS</code> and \n<code>mainegeo.patterns.AMBIGUOUS_GROUP_NAMES</code> dicts are also fixed.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ResultString</span><span class=\"p\">(</span><span class=\"s1\">&#39;FORT KENT/BIG TWENTY TWP/   T15 R15 WELS&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">normalized_string</span>\n<span class=\"go\">&#39;FORT KENT, BIG TWENTY TWP, T15 R15 WELS&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ResultString</span><span class=\"p\">(</span><span class=\"s1\">&#39;T12/R13 WELS/T9 R8 WELS&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">normalized_string</span>\n<span class=\"go\">&#39;T12 R13 WELS, T9 R8 WELS&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ResultString</span><span class=\"p\">(</span><span class=\"s1\">&#39;T10 SD TWP (CHERRYFIELD, FRANKLIN &amp; MILBRIDGE)&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">normalized_string</span>\n<span class=\"go\">&#39;T10 SD TWP (CHERRYFIELD, FRANKLIN, MILBRIDGE)&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "mainegeo.elections.ResultString.registration_town_names", "modulename": "mainegeo.elections", "qualname": "ResultString.registration_town_names", "kind": "variable", "doc": "<p>List of registration town names extracted from result string.</p>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>Splits strings by package-level STANDARD_DELIMITER.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ResultString</span><span class=\"p\">(</span><span class=\"s1\">&#39;MOUNT CHASE -- T5 R7 TWP&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">registration_town_names</span>\n<span class=\"go\">[&#39;MOUNT CHASE&#39;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ResultString</span><span class=\"p\">(</span><span class=\"s1\">&#39;T7 SD TWP (STEUBEN)&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">registration_town_names</span>\n<span class=\"go\">[&#39;STEUBEN&#39;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ResultString</span><span class=\"p\">(</span><span class=\"s1\">&#39;CROSS LAKE TWP (T17 R5)&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">registration_town_names</span>\n<span class=\"go\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ResultString</span><span class=\"p\">(</span><span class=\"s1\">&#39;ARGYLE TWP (ALTON, EDINBURG)&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">registration_town_names</span>\n<span class=\"go\">[&#39;ALTON&#39;, &#39;EDINBURG&#39;]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "annotation": ": List[str]"}, {"fullname": "mainegeo.elections.ResultString.reporting_town_names", "modulename": "mainegeo.elections", "qualname": "ResultString.reporting_town_names", "kind": "variable", "doc": "<p>Extract list of reporting town names from result string.</p>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>Drops parentheses around township alias, but does not remove alias.</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>result_str:</strong>  Delimited result string with one or more towns or townships</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List: Reporting towns with formatting identifiers stripped</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_reporting_towns</span><span class=\"p\">(</span><span class=\"s1\">&#39;MOUNT CHASE--T5 R7 TWP&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;T5 R7&#39;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_reporting_towns</span><span class=\"p\">(</span><span class=\"s1\">&#39;HERSEYTOWN, SOLDIERTOWN TWPS (MEDWAY)&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;HERSEYTOWN&#39;, &#39;SOLDIERTOWN TWPS&#39;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_reporting_towns</span><span class=\"p\">(</span><span class=\"s1\">&#39;ARGYLE TWP (ALTON, EDINBURG)&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;ARGYLE TWP&#39;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_reporting_towns</span><span class=\"p\">(</span><span class=\"s1\">&#39;BARNARD TWP, EBEEMEE TWP (T5 R9 NWP), T4 R9 NWP TWP&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;BARNARD TWP&#39;, &#39;EBEEMEE TWP T5 R9 NWP&#39;, &#39;T4 R9 NWP&#39;]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "annotation": ": List[str]"}, {"fullname": "mainegeo.elections.ReportingUnit", "modulename": "mainegeo.elections", "qualname": "ReportingUnit", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "mainegeo.elections.ReportingUnit.__init__", "modulename": "mainegeo.elections", "qualname": "ReportingUnit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parsed_string</span><span class=\"p\">:</span> <span class=\"n\">mainegeo</span><span class=\"o\">.</span><span class=\"n\">elections</span><span class=\"o\">.</span><span class=\"n\">ResultString</span>,</span><span class=\"param\">\t<span class=\"n\">county</span><span class=\"p\">:</span> <span class=\"n\">mainegeo</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">County</span></span>)</span>"}, {"fullname": "mainegeo.elections.ReportingUnit.parsed_string", "modulename": "mainegeo.elections", "qualname": "ReportingUnit.parsed_string", "kind": "variable", "doc": "<p></p>\n", "annotation": ": mainegeo.elections.ResultString"}, {"fullname": "mainegeo.elections.ReportingUnit.county", "modulename": "mainegeo.elections", "qualname": "ReportingUnit.county", "kind": "variable", "doc": "<p></p>\n", "annotation": ": mainegeo.entities.County"}, {"fullname": "mainegeo.elections.ReportingUnit.from_strings", "modulename": "mainegeo.elections", "qualname": "ReportingUnit.from_strings", "kind": "function", "doc": "<p>Factory method to create a fully processed ReportingUnit.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">result_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">county_code</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mainegeo</span><span class=\"o\">.</span><span class=\"n\">elections</span><span class=\"o\">.</span><span class=\"n\">ReportingUnit</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.elections.ReportingUnit.raw_string", "modulename": "mainegeo.elections", "qualname": "ReportingUnit.raw_string", "kind": "variable", "doc": "<p>Return original SoS name for this reporting unit.</p>\n", "annotation": ": str"}, {"fullname": "mainegeo.elections.ReportingUnit.formatted_string", "modulename": "mainegeo.elections", "qualname": "ReportingUnit.formatted_string", "kind": "variable", "doc": "<p>Return a formatted string representation of this reporting unit.</p>\n", "annotation": ": str"}, {"fullname": "mainegeo.elections.ReportingUnit.reporting_town_standard_names", "modulename": "mainegeo.elections", "qualname": "ReportingUnit.reporting_town_standard_names", "kind": "variable", "doc": "<p>List of reporting town names. Canonical name if match was found, else raw name.</p>\n"}, {"fullname": "mainegeo.elections.ReportingUnit.registration_town_standard_names", "modulename": "mainegeo.elections", "qualname": "ReportingUnit.registration_town_standard_names", "kind": "variable", "doc": "<p>List of registration town names. Canonical name if match was found, else raw name.</p>\n"}, {"fullname": "mainegeo.elections.ReportingUnit.registration_towns", "modulename": "mainegeo.elections", "qualname": "ReportingUnit.registration_towns", "kind": "variable", "doc": "<p>List of registration towns as NamedTownship objects.</p>\n", "annotation": ": List[mainegeo.elections.NamedTownship]"}, {"fullname": "mainegeo.elections.ReportingUnit.reporting_towns", "modulename": "mainegeo.elections", "qualname": "ReportingUnit.reporting_towns", "kind": "variable", "doc": "<p>List of registration towns as ResultGeo child objects.</p>\n", "annotation": ": List[mainegeo.elections.ResultGeo]"}, {"fullname": "mainegeo.elections.ReportingUnit.has_unspecified_group", "modulename": "mainegeo.elections", "qualname": "ReportingUnit.has_unspecified_group", "kind": "variable", "doc": "<p>Return True if the result object includes an unspecified group, else False.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"n\">ReportingUnit</span><span class=\"o\">.</span><span class=\"n\">from_strings</span><span class=\"p\">(</span><span class=\"s1\">&#39;MEDWAY/TOWNSHIPS&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;PEN&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">has_unspecified_group</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"n\">ReportingUnit</span><span class=\"o\">.</span><span class=\"n\">from_strings</span><span class=\"p\">(</span><span class=\"s1\">&#39;ADAMSTOWN/LOWER CUPSUPTIC TWPS (RANGELEY)&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;OXF&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">has_unspecified_group</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"n\">ReportingUnit</span><span class=\"o\">.</span><span class=\"n\">from_strings</span><span class=\"p\">(</span><span class=\"s1\">&#39;MILLINOCKET PISCATAQUIS TWPS&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;PIS&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">has_unspecified_group</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"n\">ReportingUnit</span><span class=\"o\">.</span><span class=\"n\">from_strings</span><span class=\"p\">(</span><span class=\"s1\">&#39;MILLINOCKET/PEN TWPS&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;PEN&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">has_unspecified_group</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"n\">ReportingUnit</span><span class=\"o\">.</span><span class=\"n\">from_strings</span><span class=\"p\">(</span><span class=\"s1\">&#39;LEXINGTON &amp; SPRING LAKE TWPS&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;SOM&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">has_unspecified_group</span>\n<span class=\"go\">False</span>\n</code></pre>\n  </div>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "mainegeo.entities", "modulename": "mainegeo.entities", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "mainegeo.entities.TownType", "modulename": "mainegeo.entities", "qualname": "TownType", "kind": "class", "doc": "<p>Enumeration of geography types used in <code>mainegeo.matching.TownReference</code> objects.</p>\n", "bases": "enum.Enum"}, {"fullname": "mainegeo.entities.TownType.TOWN", "modulename": "mainegeo.entities", "qualname": "TownType.TOWN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TownType.TOWN: &#x27;Town&#x27;&gt;"}, {"fullname": "mainegeo.entities.TownType.CITY", "modulename": "mainegeo.entities", "qualname": "TownType.CITY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TownType.CITY: &#x27;City&#x27;&gt;"}, {"fullname": "mainegeo.entities.TownType.PLANTATION", "modulename": "mainegeo.entities", "qualname": "TownType.PLANTATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TownType.PLANTATION: &#x27;Plantation&#x27;&gt;"}, {"fullname": "mainegeo.entities.TownType.RESERVATION", "modulename": "mainegeo.entities", "qualname": "TownType.RESERVATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TownType.RESERVATION: &#x27;Reservation&#x27;&gt;"}, {"fullname": "mainegeo.entities.TownType.UNORGANIZED", "modulename": "mainegeo.entities", "qualname": "TownType.UNORGANIZED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TownType.UNORGANIZED: &#x27;Unorganized Township&#x27;&gt;"}, {"fullname": "mainegeo.entities.TownType.ISLAND", "modulename": "mainegeo.entities", "qualname": "TownType.ISLAND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TownType.ISLAND: &#x27;Island Group&#x27;&gt;"}, {"fullname": "mainegeo.entities.Cousub", "modulename": "mainegeo.entities", "qualname": "Cousub", "kind": "class", "doc": "<p>An object representing a U.S. Census Bureau county subdivision (<a href=\"https://www.census.gov/library/reference/code-lists/ansi.html#cousub\">COUSUB</a>).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>geocode:</strong>  The ten-digit Census code (state FIPS + county FIPS + county subdivision GEOID)</li>\n<li><strong>name:</strong>  Census full name for county subdivision (basename + geoclass)</li>\n<li><strong>basename:</strong>  Census base name for county subdivision</li>\n<li><strong>geoclass:</strong>  Census <a href=\"https://www.census.gov/library/reference/code-lists/class-codes.html\">CLASSFP</a> code</li>\n</ul>\n"}, {"fullname": "mainegeo.entities.Cousub.__init__", "modulename": "mainegeo.entities", "qualname": "Cousub.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">geocode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">basename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">geoclass</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "mainegeo.entities.Cousub.geocode", "modulename": "mainegeo.entities", "qualname": "Cousub.geocode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | int", "default_value": "None"}, {"fullname": "mainegeo.entities.Cousub.name", "modulename": "mainegeo.entities", "qualname": "Cousub.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "mainegeo.entities.Cousub.basename", "modulename": "mainegeo.entities", "qualname": "Cousub.basename", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "mainegeo.entities.Cousub.geoclass", "modulename": "mainegeo.entities", "qualname": "Cousub.geoclass", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "mainegeo.entities.County", "modulename": "mainegeo.entities", "qualname": "County", "kind": "class", "doc": "<p>An object representing a county.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  Full name of the county</li>\n<li><strong>code:</strong>  First three letters of the county name (commonly used by SoS)</li>\n<li><strong>fips:</strong>  String or integer FIPS code (used by Census)</li>\n</ul>\n\n<p>Can be initiated with any argument. If not all arguments are provided,\nthe others will be populated from a lookup table.</p>\n"}, {"fullname": "mainegeo.entities.County.__init__", "modulename": "mainegeo.entities", "qualname": "County.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fips</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "mainegeo.entities.County.name", "modulename": "mainegeo.entities", "qualname": "County.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "mainegeo.entities.County.code", "modulename": "mainegeo.entities", "qualname": "County.code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "mainegeo.entities.County.fips", "modulename": "mainegeo.entities", "qualname": "County.fips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | int", "default_value": "None"}, {"fullname": "mainegeo.matching", "modulename": "mainegeo.matching", "kind": "module", "doc": "<p>This module generates or loads a database of Maine town names and their\naliases, and provides a function for matching.</p>\n"}, {"fullname": "mainegeo.matching.TownReference", "modulename": "mainegeo.matching", "qualname": "TownReference", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "mainegeo.matching.TownReference.__init__", "modulename": "mainegeo.matching", "qualname": "TownReference.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">geocode</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">gnis_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">town_type</span><span class=\"p\">:</span> <span class=\"n\">mainegeo</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">TownType</span>,</span><span class=\"param\">\t<span class=\"n\">county</span><span class=\"p\">:</span> <span class=\"n\">mainegeo</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">County</span>,</span><span class=\"param\">\t<span class=\"n\">cousub</span><span class=\"p\">:</span> <span class=\"n\">mainegeo</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">Cousub</span>,</span><span class=\"param\">\t<span class=\"n\">aliases</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">_processed</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "mainegeo.matching.TownReference.name", "modulename": "mainegeo.matching", "qualname": "TownReference.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "mainegeo.matching.TownReference.geocode", "modulename": "mainegeo.matching", "qualname": "TownReference.geocode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "mainegeo.matching.TownReference.gnis_id", "modulename": "mainegeo.matching", "qualname": "TownReference.gnis_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "mainegeo.matching.TownReference.town_type", "modulename": "mainegeo.matching", "qualname": "TownReference.town_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": mainegeo.entities.TownType"}, {"fullname": "mainegeo.matching.TownReference.county", "modulename": "mainegeo.matching", "qualname": "TownReference.county", "kind": "variable", "doc": "<p></p>\n", "annotation": ": mainegeo.entities.County"}, {"fullname": "mainegeo.matching.TownReference.cousub", "modulename": "mainegeo.matching", "qualname": "TownReference.cousub", "kind": "variable", "doc": "<p></p>\n", "annotation": ": mainegeo.entities.Cousub"}, {"fullname": "mainegeo.matching.TownReference.aliases", "modulename": "mainegeo.matching", "qualname": "TownReference.aliases", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "mainegeo.matching.TownDatabase", "modulename": "mainegeo.matching", "qualname": "TownDatabase", "kind": "class", "doc": "<p></p>\n", "bases": "mainegeo.connections.TownshipDataSource"}, {"fullname": "mainegeo.matching.TownDatabase.__init__", "modulename": "mainegeo.matching", "qualname": "TownDatabase.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">mainegeo</span><span class=\"o\">.</span><span class=\"n\">matching</span><span class=\"o\">.</span><span class=\"n\">TownReference</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_processed</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "mainegeo.matching.TownDatabase.data", "modulename": "mainegeo.matching", "qualname": "TownDatabase.data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[mainegeo.matching.TownReference]", "default_value": "None"}, {"fullname": "mainegeo.matching.TownDatabase.yaml_path", "modulename": "mainegeo.matching", "qualname": "TownDatabase.yaml_path", "kind": "variable", "doc": "<p>Processed data</p>\n"}, {"fullname": "mainegeo.matching.TownDatabase.build", "modulename": "mainegeo.matching", "qualname": "TownDatabase.build", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.matching.TownDatabase.create_from_raw_data", "modulename": "mainegeo.matching", "qualname": "TownDatabase.create_from_raw_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.matching.TownDatabase.json_object_hook", "modulename": "mainegeo.matching", "qualname": "TownDatabase.json_object_hook", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">json_record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.matching.TownDatabase.load_from_yaml", "modulename": "mainegeo.matching", "qualname": "TownDatabase.load_from_yaml", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.matching.TownDatabase.save_to_yaml", "modulename": "mainegeo.matching", "qualname": "TownDatabase.save_to_yaml", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.matching.TownDatabase.alias_lookup", "modulename": "mainegeo.matching", "qualname": "TownDatabase.alias_lookup", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[mainegeo.matching.TownAlias, mainegeo.matching.TownReference]"}, {"fullname": "mainegeo.matching.TownDatabase.search_database", "modulename": "mainegeo.matching", "qualname": "TownDatabase.search_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">mainegeo</span><span class=\"o\">.</span><span class=\"n\">matching</span><span class=\"o\">.</span><span class=\"n\">TownReference</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.matching.TownDatabase.match", "modulename": "mainegeo.matching", "qualname": "TownDatabase.match", "kind": "function", "doc": "<p>Match a town name variant to the alias database and return the TownReference object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>town:</strong>  A single town or township name</li>\n<li><strong>county_fips:</strong>  Integer code for county. If used, will improve match rate.</li>\n<li><strong>cleaned:</strong>  True if the town name is already clean, False if it should be cleaned.</li>\n</ul>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">towndb</span> <span class=\"o\">=</span> <span class=\"n\">TownDatabase</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">towndb</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s1\">&#39;Cross Lake Twp (T17 R5)&#39;</span><span class=\"p\">,</span> <span class=\"n\">cleaned</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"go\">&#39;Cross Lake Twp&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">towndb</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s1\">&#39;Prentiss Twp&#39;</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">towndb</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s1\">&#39;Prentiss Twp&#39;</span><span class=\"p\">,</span> <span class=\"n\">county_fips</span> <span class=\"o\">=</span> <span class=\"mi\">19</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"go\">&#39;Prentiss Twp T7 R3 NBPP&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">town</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">county_fips</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cleaned</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mainegeo</span><span class=\"o\">.</span><span class=\"n\">matching</span><span class=\"o\">.</span><span class=\"n\">TownReference</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.matching.TownDatabase.canonical_name", "modulename": "mainegeo.matching", "qualname": "TownDatabase.canonical_name", "kind": "function", "doc": "<p>Match a town to the alias database and return the canonical name only.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">town</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">county_fips</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.patterns", "modulename": "mainegeo.patterns", "kind": "module", "doc": "<p>Regex patterns and helpers for parsing Maine election results and place names.</p>\n"}, {"fullname": "mainegeo.patterns.COUNTIES", "modulename": "mainegeo.patterns", "qualname": "COUNTIES", "kind": "variable", "doc": "<p></p>\n", "annotation": ": mainegeo.lookups.CountyData", "default_value": "&lt;mainegeo.lookups.CountyData object&gt;"}, {"fullname": "mainegeo.patterns.TOWNSHIPS", "modulename": "mainegeo.patterns", "qualname": "TOWNSHIPS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": mainegeo.lookups.TownshipData", "default_value": "&lt;mainegeo.lookups.TownshipData object&gt;"}, {"fullname": "mainegeo.patterns.KNOWN_TYPOS", "modulename": "mainegeo.patterns", "qualname": "KNOWN_TYPOS", "kind": "variable", "doc": "<p>Errors and replacements for known typos in election results files.</p>\n\n<p>These errors represent one-off typos rather than confusion about how the\ntown name should be spelled. Misspellings that are the result of confusion\nand might reoccur in the future are logged as aliases in \n<code>mainegeo.matching.TownDatabase</code>.</p>\n\n<p>Used in <code>mainegeo.elections.ResultString.normalized_string</code>.</p>\n", "annotation": ": Dict[str, str]", "default_value": "{&#x27;MARIONTWP&#x27;: &#x27;MARION TWP&#x27;, &#x27;PISCATAQUS&#x27;: &#x27;PISCATAQUIS&#x27;, &#x27;ORNVEILLE&#x27;: &#x27;ORNEVILLE&#x27;, &#x27;EDUMUNDS&#x27;: &#x27;EDMUNDS&#x27;, &#x27;SILIVER RIDGE&#x27;: &#x27;SILVER RIDGE&#x27;, &#x27;FRANKLIN/T9 T10 SD&#x27;: &#x27;FRANKLIN/T9 SD/T10 SD&#x27;, &#x27;PLEASANT POINT VOTING DISTRICT RICT&#x27;: &#x27;PLEASANT POINT VOTING DISTRICT&#x27;}"}, {"fullname": "mainegeo.patterns.AMBIGUOUS_GROUP_NAMES", "modulename": "mainegeo.patterns", "qualname": "AMBIGUOUS_GROUP_NAMES", "kind": "variable", "doc": "<p>Errors and replacements for ambiguously-named unspecified groups.</p>\n\n<p>These typos follow patterns, but it simplifies unspecified group name \ndetection significantly if they are corrected early in processing.</p>\n\n<h6 id=\"corrections-in-this-dictionary-include\">Corrections in this dictionary include:</h6>\n\n<blockquote>\n  <ul>\n  <li><p>SoS staff sometimes omit the registration town name for Millinocket\n  groups. Groups of Penobscot or Piscataquis townships with no other\n  label are safely assumed to register at Millinocket.</p></li>\n  <li><p>On one occasion, SoS staff did not pluralize the group name (e.g. \n  'MILLINOCKET -- PENOBSCOT TWP'). The intent in this case is clear.</p></li>\n  </ul>\n</blockquote>\n\n<p>Used in <code>mainegeo.elections.ResultString.normalized_string</code>.</p>\n", "annotation": ": Dict[str, str]", "default_value": "{&#x27;^PENOBSCOT TWPS$&#x27;: &#x27;MILLINOCKET PENOBSCOT TWPS&#x27;, &#x27;^PISCATAQUIS TWPS$&#x27;: &#x27;MILLINOCKET PISCATAQUIS TWPS&#x27;, &#x27;PEN(?:OBSCOT)? TWP$&#x27;: &#x27;PENOBSCOT TWPS&#x27;, &#x27;PIS(?:CATAQUIS)? TWP$&#x27;: &#x27;PISCATAQUIS TWPS&#x27;}"}, {"fullname": "mainegeo.patterns.REGIONS", "modulename": "mainegeo.patterns", "qualname": "REGIONS", "kind": "variable", "doc": "<p>Valid region codes that can appear in township names.</p>\n\n<p>These are two- to four-letter codes like 'WELS' (West of the\nEasterly Line of the State) or 'BPP' (Bingham's Penobscot Purchase).</p>\n\n<p>Township names can contain zero, one, or two regions.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;ED&#x27;, &#x27;MD&#x27;, &#x27;ND&#x27;, &#x27;SD&#x27;, &#x27;TS&#x27;, &#x27;BKP&#x27;, &#x27;BPP&#x27;, &#x27;EKR&#x27;, &#x27;NWP&#x27;, &#x27;WKR&#x27;, &#x27;NBKP&#x27;, &#x27;NBPP&#x27;, &#x27;WBKP&#x27;, &#x27;WELS&#x27;]"}, {"fullname": "mainegeo.patterns.REGION", "modulename": "mainegeo.patterns", "qualname": "REGION", "kind": "variable", "doc": "<p>Uncompiled regex building block representing a region designator.</p>\n", "annotation": ": str", "default_value": "&#x27;(?:ED|MD|ND|SD|TS|BKP|BPP|EKR|NWP|WKR|NBKP|NBPP|WBKP|WELS)&#x27;"}, {"fullname": "mainegeo.patterns.RANGE", "modulename": "mainegeo.patterns", "qualname": "RANGE", "kind": "variable", "doc": "<p>Uncompiled regex building block representing a range designator.</p>\n\n<p>Ranges are counted from the easterly line toward the west,\nnumbered 1-19 (e.g., R1, R19).</p>\n", "annotation": ": str", "default_value": "&#x27;(?:R.?[\\\\d]{1,2})&#x27;"}, {"fullname": "mainegeo.patterns.TOWNSHIP_STANDARD", "modulename": "mainegeo.patterns", "qualname": "TOWNSHIP_STANDARD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;(?:T.?\\\\d{1,2})&#x27;"}, {"fullname": "mainegeo.patterns.TOWNSHIP_ALTERNATE", "modulename": "mainegeo.patterns", "qualname": "TOWNSHIP_ALTERNATE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;(?&lt;!\\\\w)T[ABCDX](?![a-z])&#x27;"}, {"fullname": "mainegeo.patterns.TOWNSHIP", "modulename": "mainegeo.patterns", "qualname": "TOWNSHIP", "kind": "variable", "doc": "<p>Uncompiled regex building block representing a township designator.</p>\n\n<h6 id=\"townships-are-designated-by\">Townships are designated by:</h6>\n\n<blockquote>\n  <ul>\n  <li>Numbers 1-19 from south to north (e.g., T1, T19)</li>\n  <li>Occasional letter designations (TA, TB, TC, TD, TX)</li>\n  </ul>\n</blockquote>\n", "annotation": ": str", "default_value": "&#x27;(?:(?:T.?\\\\d{1,2})|(?&lt;!\\\\w)T[ABCDX](?![a-z]))&#x27;"}, {"fullname": "mainegeo.patterns.UNNAMED", "modulename": "mainegeo.patterns", "qualname": "UNNAMED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;((?:(?:(?:T.?\\\\d{1,2})|(?&lt;!\\\\w)T[ABCDX](?![a-z])))(?:[^,\\\\w]{0,3}(?:R.?[\\\\d]{1,2}))?(?:[^,\\\\w]{0,3}(?:ED|MD|ND|SD|TS|BKP|BPP|EKR|NWP|WKR|NBKP|NBPP|WBKP|WELS)){0,2})&#x27;"}, {"fullname": "mainegeo.patterns.UNNAMED_ELEMENTS", "modulename": "mainegeo.patterns", "qualname": "UNNAMED_ELEMENTS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;(?:(?:(?:T.?\\\\d{1,2})|(?&lt;!\\\\w)T[ABCDX](?![a-z]))|(?:R.?[\\\\d]{1,2})|(?:ED|MD|ND|SD|TS|BKP|BPP|EKR|NWP|WKR|NBKP|NBPP|WBKP|WELS))&#x27;"}, {"fullname": "mainegeo.patterns.UNNAMED_PATTERN", "modulename": "mainegeo.patterns", "qualname": "UNNAMED_PATTERN", "kind": "variable", "doc": "<p>Compiled regex matching a full unnamed township name, with tolerance for formatting variation.</p>\n\n<p>Used in <code>mainegeo.townships.is_unnamed_township</code> and <code>mainegeo.townships.clean_codes</code>.</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;((?:(?:(?:T.?\\\\d{1,2})|(?&lt;!\\\\w)T[ABCDX](?![a-z])))(?:[^,\\\\w]{0,3}(?:R.?[\\\\d]{1,2}))?(?:[^,\\\\w]{0,3}(?:ED|MD|ND|SD|TS|BKP|BPP|EKR|NWP|WKR|NBKP|NBPP|WBKP|WELS)){0,2})&#x27;, re.IGNORECASE)"}, {"fullname": "mainegeo.patterns.UNNAMED_ELEMENTS_PATTERN", "modulename": "mainegeo.patterns", "qualname": "UNNAMED_ELEMENTS_PATTERN", "kind": "variable", "doc": "<p>Compiled regex matching any unnamed township name element.</p>\n\n<p>Used in <code>mainegeo.townships.clean_code</code>.</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;(?:(?:(?:T.?\\\\d{1,2})|(?&lt;!\\\\w)T[ABCDX](?![a-z]))|(?:R.?[\\\\d]{1,2})|(?:ED|MD|ND|SD|TS|BKP|BPP|EKR|NWP|WKR|NBKP|NBPP|WBKP|WELS))&#x27;, re.IGNORECASE)"}, {"fullname": "mainegeo.patterns.LAST_REGION_PATTERN", "modulename": "mainegeo.patterns", "qualname": "LAST_REGION_PATTERN", "kind": "variable", "doc": "<p>Compiled regex matching the last region code in an unnamed township name.</p>\n\n<p>Used in <code>mainegeo.townships.strip_region</code>.</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27; (?:ED|MD|ND|SD|TS|BKP|BPP|EKR|NWP|WKR|NBKP|NBPP|WBKP|WELS)$&#x27;, re.IGNORECASE)"}, {"fullname": "mainegeo.patterns.LEADING_ZERO", "modulename": "mainegeo.patterns", "qualname": "LEADING_ZERO", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;(?&lt;=[^\\\\d])0(?=\\\\d)&#x27;"}, {"fullname": "mainegeo.patterns.NOT_REPORTING", "modulename": "mainegeo.patterns", "qualname": "NOT_REPORTING", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;(?!AND|&amp;)&#x27;"}, {"fullname": "mainegeo.patterns.PARENTHETICAL", "modulename": "mainegeo.patterns", "qualname": "PARENTHETICAL", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;\\\\((?!AND|&amp;)[^\\\\(]+\\\\)&#x27;"}, {"fullname": "mainegeo.patterns.PRECEDES_DASH", "modulename": "mainegeo.patterns", "qualname": "PRECEDES_DASH", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;^[^-]+--&#x27;"}, {"fullname": "mainegeo.patterns.STANDARD_DELIMITER", "modulename": "mainegeo.patterns", "qualname": "STANDARD_DELIMITER", "kind": "variable", "doc": "<p>Preferred delimiter character; all other delimiters will be replaced by this.</p>\n", "annotation": ": str", "default_value": "&#x27;,&#x27;"}, {"fullname": "mainegeo.patterns.NONSTANDARD_DELIMITERS", "modulename": "mainegeo.patterns", "qualname": "NONSTANDARD_DELIMITERS", "kind": "variable", "doc": "<p>Substrings that are sometimes used by the SoS to delimit reporting towns.</p>\n", "annotation": ": str", "default_value": "[&#x27;&amp;&#x27;, &#x27;/&#x27;, &#x27;(AND &#x27;]"}, {"fullname": "mainegeo.patterns.MEANINGFUL_CHARACTERS", "modulename": "mainegeo.patterns", "qualname": "MEANINGFUL_CHARACTERS", "kind": "variable", "doc": "<p>Punctuation characters used by the SoS to communicate info about a reporting unit.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <ul>\n  <li>BENEDICTA/SILVER RIDGE TWPS: forward slashes delimit towns.</li>\n  <li>T15 R6 TWP (EAGLE LAKE): parentheses indicate registration town</li>\n  <li>BLAINE -- E TWP: double hyphens indicate registration town</li>\n  </ul>\n</blockquote>\n\n<p>These characters should not be stripped until this info has been parsed out.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;(&#x27;, &#x27;)&#x27;, &#x27;-&#x27;, &#x27;&amp;&#x27;, &#x27;/&#x27;, &#x27;,&#x27;]"}, {"fullname": "mainegeo.patterns.REGISTRATION_PATTERN", "modulename": "mainegeo.patterns", "qualname": "REGISTRATION_PATTERN", "kind": "variable", "doc": "<p>Compiled regex matching a substring of non-reporting registration towns.</p>\n\n<p>Used in <code>mainegeo.elections.ResultString</code>.</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;\\\\((?!AND|&amp;)[^\\\\(]+\\\\)|^[^-]+--&#x27;, re.IGNORECASE)"}, {"fullname": "mainegeo.patterns.CLEAN_TOWNSHIP_PATTERN", "modulename": "mainegeo.patterns", "qualname": "CLEAN_TOWNSHIP_PATTERN", "kind": "variable", "doc": "<p>Compiled regex matching non-word characters and leading zeroes.</p>\n\n<p>Used in <code>mainegeo.townships.clean_code</code>.</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;[^\\\\w]|(?&lt;=[^\\\\d])0(?=\\\\d)&#x27;)"}, {"fullname": "mainegeo.patterns.NON_ALIAS_PATTERN", "modulename": "mainegeo.patterns", "qualname": "NON_ALIAS_PATTERN", "kind": "variable", "doc": "<p>Compiled regex matching substrings that are not an unnamed township code or punctuation.</p>\n\n<p>Used in <code>mainegeo.townships.has_alias</code> and <code>mainegeo.townships.extract_alias</code>.</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;((?:(?:(?:T.?\\\\d{1,2})|(?&lt;!\\\\w)T[ABCDX](?![a-z])))(?:[^,\\\\w]{0,3}(?:R.?[\\\\d]{1,2}))?(?:[^,\\\\w]{0,3}(?:ED|MD|ND|SD|TS|BKP|BPP|EKR|NWP|WKR|NBKP|NBPP|WBKP|WELS)){0,2})(?: twps?)?|[^\\\\s\\\\w]&#x27;, re.IGNORECASE)"}, {"fullname": "mainegeo.patterns.DROP_CHARACTERS_PATTERN", "modulename": "mainegeo.patterns", "qualname": "DROP_CHARACTERS_PATTERN", "kind": "variable", "doc": "<p>Matches all characters except word characters, whitespace, and meaningful punctuation.</p>\n\n<p>Meaningful punctuation characters are those used by the SoS to communicate information\nabout a reporting unit (e.g. forward slashes to separate reporting towns). The full list\nof meanginful characters is defined in <code>mainegeo.patterns.MEANINGFUL_CHARACTERS</code>.</p>\n\n<p>Used in <code>mainegeo.elections.ResultString._drop_non_meaningful_characters</code>.</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;[^\\\\w\\\\s\\\\(\\\\)\\\\-\\\\&amp;/,]&#x27;)"}, {"fullname": "mainegeo.patterns.NONSTANDARD_DELIMITER_PATTERN", "modulename": "mainegeo.patterns", "qualname": "NONSTANDARD_DELIMITER_PATTERN", "kind": "variable", "doc": "<p>Compiled regex matching non-standard result string delimiters used occasionally by the SoS.</p>\n\n<p>Used in <code>mainegeo.elections.ResultString</code>.</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;\\\\&amp;|/|\\\\(AND\\\\ &#x27;, re.IGNORECASE)"}, {"fullname": "mainegeo.patterns.ORPHAN_PARENTHESIS_PATTERN", "modulename": "mainegeo.patterns", "qualname": "ORPHAN_PARENTHESIS_PATTERN", "kind": "variable", "doc": "<p>Compiled regex matching the orphaned closing parenthesis left after delimiter normalization.</p>\n\n<h6 id=\"capture-groups\">Capture groups:</h6>\n\n<blockquote>\n  <ul>\n  <li>result</li>\n  <li>orphan_parenthesis</li>\n  </ul>\n</blockquote>\n\n<p>Used in <code>mainegeo.elections.ResultString</code>.</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;^(?P&lt;result&gt;[^(]+)(?P&lt;orphan_parenthesis&gt;[)])$&#x27;)"}, {"fullname": "mainegeo.patterns.GNIS_GEOTYPES", "modulename": "mainegeo.patterns", "qualname": "GNIS_GEOTYPES", "kind": "variable", "doc": "<p>Geotypes used by the Geographic Names Information System (GNIS).</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;CITY&#x27;, &#x27;PLANTATION&#x27;, &#x27;TOWNSHIP&#x27;, &#x27;TOWN&#x27;]"}, {"fullname": "mainegeo.patterns.ABBREVIATIONS", "modulename": "mainegeo.patterns", "qualname": "ABBREVIATIONS", "kind": "variable", "doc": "<p>Geotype suffixes used by the Maine SoS and their abbreviations.</p>\n", "annotation": ": Dict[str, str]", "default_value": "{&#x27;PLANTATION&#x27;: &#x27;PLT&#x27;, &#x27;TOWNSHIP&#x27;: &#x27;TWP&#x27;, &#x27;VOTING DISTRICT&#x27;: &#x27;VOTING DIST&#x27;, &#x27;RESERVATION&#x27;: &#x27;RES&#x27;}"}, {"fullname": "mainegeo.patterns.JUNIOR_SUFFIXES", "modulename": "mainegeo.patterns", "qualname": "JUNIOR_SUFFIXES", "kind": "variable", "doc": "<p>Geotypes which may precede another geotype suffix or be used alone.</p>\n\n<p>For example, Moxie Gore and Moxie Gore Twp have subtly different meanings,\nbut refer to the same place and are often used interchangeably by the SoS.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;GORE&#x27;, &#x27;GRANT&#x27;, &#x27;ISLAND&#x27;]"}, {"fullname": "mainegeo.patterns.DIRECTIONS", "modulename": "mainegeo.patterns", "qualname": "DIRECTIONS", "kind": "variable", "doc": "<p>Direction words which may modify place names.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;NORTH&#x27;, &#x27;SOUTH&#x27;, &#x27;EAST&#x27;, &#x27;WEST&#x27;]"}, {"fullname": "mainegeo.patterns.CONTAINS_FALSE_SUFFIX", "modulename": "mainegeo.patterns", "qualname": "CONTAINS_FALSE_SUFFIX", "kind": "variable", "doc": "<p>Canonical place names that contain a word that is normally a suffix.</p>\n\n<p>For example: Indian Township is the name of a town, not a township.\nThese false suffixes should be treated differently than true \nsuffixes during processing.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;INDIAN TOWNSHIP&#x27;]"}, {"fullname": "mainegeo.patterns.generate_valid_punctuation", "modulename": "mainegeo.patterns", "qualname": "generate_valid_punctuation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">char</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">template</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.patterns.generate_false_suffix", "modulename": "mainegeo.patterns", "qualname": "generate_false_suffix", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.patterns.AMPERSANDS_TEMPLATE", "modulename": "mainegeo.patterns", "qualname": "AMPERSANDS_TEMPLATE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;(?:(?&lt;=\\\\g&lt;leading&gt;)&amp;(?=\\\\g&lt;trailing&gt;))&#x27;"}, {"fullname": "mainegeo.patterns.HYPHENS_TEMPLATE", "modulename": "mainegeo.patterns", "qualname": "HYPHENS_TEMPLATE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;\\\\g&lt;leading&gt;-(?=\\\\g&lt;trailing&gt;)&#x27;"}, {"fullname": "mainegeo.patterns.GNIS_NAME", "modulename": "mainegeo.patterns", "qualname": "GNIS_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;geotype&gt;CITY|PLANTATION|TOWNSHIP|TOWN) of (?P&lt;town&gt;.+)&#x27;"}, {"fullname": "mainegeo.patterns.SUFFIX_REPLACEMENTS", "modulename": "mainegeo.patterns", "qualname": "SUFFIX_REPLACEMENTS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, str]", "default_value": "{&#x27;(?i)(?&lt;![A-Z])PLANTATION(?=S?$)&#x27;: &#x27;PLT&#x27;, &#x27;(?i)(?&lt;![A-Z])TOWNSHIP(?=S?$)&#x27;: &#x27;TWP&#x27;, &#x27;(?i)(?&lt;![A-Z])VOTING DISTRICT(?=S?$)&#x27;: &#x27;VOTING DIST&#x27;, &#x27;(?i)(?&lt;![A-Z])RESERVATION(?=S?$)&#x27;: &#x27;RES&#x27;}"}, {"fullname": "mainegeo.patterns.ALL_SUFFIXES", "modulename": "mainegeo.patterns", "qualname": "ALL_SUFFIXES", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;PLANTATION|TOWNSHIP|VOTING DISTRICT|RESERVATION|PLT|TWP|VOTING DIST|RES&#x27;"}, {"fullname": "mainegeo.patterns.PRECEDES_FALSE_SUFFIX", "modulename": "mainegeo.patterns", "qualname": "PRECEDES_FALSE_SUFFIX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;INDIAN&#x27;"}, {"fullname": "mainegeo.patterns.JUNIOR_SUFFIX", "modulename": "mainegeo.patterns", "qualname": "JUNIOR_SUFFIX", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;\\\\b(GORE|GRANT|ISLAND)&#x27;"}, {"fullname": "mainegeo.patterns.VALID_AMPERSANDS", "modulename": "mainegeo.patterns", "qualname": "VALID_AMPERSANDS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;(?:(?&lt;=King )&amp;(?= Bartlett))|(?:(?&lt;=Taunton )&amp;(?= Raynham))&#x27;"}, {"fullname": "mainegeo.patterns.VALID_HYPHENS", "modulename": "mainegeo.patterns", "qualname": "VALID_HYPHENS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;Dover-(?=Foxcroft)&#x27;"}, {"fullname": "mainegeo.patterns.GNIS_PATTERN", "modulename": "mainegeo.patterns", "qualname": "GNIS_PATTERN", "kind": "variable", "doc": "<p>Matches place names with Geographic Names Information System (GNIS) formatting.</p>\n\n<h6 id=\"capture-groups\">Capture groups:</h6>\n\n<blockquote>\n  <ul>\n  <li>geotype</li>\n  <li>town</li>\n  </ul>\n</blockquote>\n\n<p>Used in <code>mainegeo.townships.normalize_suffix</code>.</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;(?P&lt;geotype&gt;CITY|PLANTATION|TOWNSHIP|TOWN) of (?P&lt;town&gt;.+)&#x27;, re.IGNORECASE)"}, {"fullname": "mainegeo.patterns.SUFFIX_PATTERN", "modulename": "mainegeo.patterns", "qualname": "SUFFIX_PATTERN", "kind": "variable", "doc": "<p>Matches all valid suffixes and suffix abbreviations.</p>\n\n<p>Used in <code>mainegeo.townships.strip_suffix</code>.</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;(?&lt;!INDIAN) (PLANTATION|TOWNSHIP|VOTING DISTRICT|RESERVATION|PLT|TWP|VOTING DIST|RES)S?$&#x27;, re.IGNORECASE)"}, {"fullname": "mainegeo.patterns.VALID_AMPERSANDS_PATTERN", "modulename": "mainegeo.patterns", "qualname": "VALID_AMPERSANDS_PATTERN", "kind": "variable", "doc": "<p>Matches ampersands that are part of canonical town names and should\nnot be interpreted as SoS result string formatting.</p>\n\n<p>Used in <code>mainegeo.townships.strip_town</code> (a helper for <code>mainegeo.townships.clean_town</code>).</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;(?:(?&lt;=King )&amp;(?= Bartlett))|(?:(?&lt;=Taunton )&amp;(?= Raynham))&#x27;, re.IGNORECASE)"}, {"fullname": "mainegeo.patterns.INVALID_PUNCTUATION_PATTERN", "modulename": "mainegeo.patterns", "qualname": "INVALID_PUNCTUATION_PATTERN", "kind": "variable", "doc": "<p>Matches all punctuation except hyphens that are part of canonical town names.</p>\n\n<p>Used in <code>mainegeo.townships.strip_town</code> (a helper for <code>mainegeo.townships.clean_town</code>).</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;[^\\\\s\\\\w](?&lt;!Dover-(?=Foxcroft))&#x27;, re.IGNORECASE)"}, {"fullname": "mainegeo.patterns.ENDSWITH_JUNIOR_SUFFIX_PATTERN", "modulename": "mainegeo.patterns", "qualname": "ENDSWITH_JUNIOR_SUFFIX_PATTERN", "kind": "variable", "doc": "<p>Matches town name that ends with a junior suffix (gore, grant, island, etc).</p>\n\n<p>Junior suffixes are listed in <code>mainegeo.patterns.JUNIOR_SUFFIXES</code>.</p>\n\n<p>Used in <code>mainegeo.townships.toggle_suffix</code>.</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;.+\\\\b(GORE|GRANT|ISLAND)$&#x27;, re.IGNORECASE)"}, {"fullname": "mainegeo.patterns.CONTAINS_JUNIOR_SUFFIX_PATTERN", "modulename": "mainegeo.patterns", "qualname": "CONTAINS_JUNIOR_SUFFIX_PATTERN", "kind": "variable", "doc": "<p>Matches town name that contains a junior suffix (gore, grant, island, etc).</p>\n\n<p>Junior suffixes are listed in <code>mainegeo.patterns.JUNIOR_SUFFIXES</code>.</p>\n\n<p>Used in <code>mainegeo.townships.toggle_suffix</code>.</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;.+\\\\b(GORE|GRANT|ISLAND) TWP$&#x27;, re.IGNORECASE)"}, {"fullname": "mainegeo.patterns.UNSPECIFIED_FLAG", "modulename": "mainegeo.patterns", "qualname": "UNSPECIFIED_FLAG", "kind": "variable", "doc": "<p>Substring that indicates an unspecified group may be present in a raw election result.</p>\n\n<p>Used in multiple functions in <code>mainegeo.elections</code>. Most important use is in\n<code>mainegeo.elections.ReportingUnit.has_unspecified_group</code>, which uses it in \ncombination with other context clues by to detect unspecified groups.</p>\n", "annotation": ": str", "default_value": "&#x27;TWPS&#x27;"}, {"fullname": "mainegeo.patterns.STANDARD_FLAG", "modulename": "mainegeo.patterns", "qualname": "STANDARD_FLAG", "kind": "variable", "doc": "<p>Substring that will be applied to unspecified groups during formatting.</p>\n\n<p>Chosen to avoid overlap with words that may occur naturally in election \nresult strings.</p>\n", "annotation": ": str", "default_value": "&#x27;UNSPECIFIED&#x27;"}, {"fullname": "mainegeo.patterns.MULTI_COUNTY_REGISTRATION_TOWNS", "modulename": "mainegeo.patterns", "qualname": "MULTI_COUNTY_REGISTRATION_TOWNS", "kind": "variable", "doc": "<p>Towns that host unspecified township groups from multiple counties.</p>\n\n<p>As of 2025, the only town that is typically reported this way is Millinocket,\ne.g. Millinocket Penobscot Twps and Millinocket Piscataquis Twps.</p>\n", "annotation": ": List[str]", "default_value": "[&#x27;MILLINOCKET&#x27;]"}, {"fullname": "mainegeo.patterns.PLURAL", "modulename": "mainegeo.patterns", "qualname": "PLURAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;TWPS&#x27;"}, {"fullname": "mainegeo.patterns.SINGULAR", "modulename": "mainegeo.patterns", "qualname": "SINGULAR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;TWP&#x27;"}, {"fullname": "mainegeo.patterns.UNSPECIFIED_REGTOWN", "modulename": "mainegeo.patterns", "qualname": "UNSPECIFIED_REGTOWN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;regtown&gt;MILLINOCKET)&#x27;"}, {"fullname": "mainegeo.patterns.UNSPECIFIED_COUNTY", "modulename": "mainegeo.patterns", "qualname": "UNSPECIFIED_COUNTY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;cty&gt;YOR|CUM|AND|SAG|LIN|OXF|FRA|KEN|KNO|WAL|PEN|SOM|PIS|HAN|WAS|ARO)&#x27;"}, {"fullname": "mainegeo.patterns.SOS_FLAG", "modulename": "mainegeo.patterns", "qualname": "SOS_FLAG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;sos_flag&gt;TWPS)&#x27;"}, {"fullname": "mainegeo.patterns.PLURAL_PATTERN", "modulename": "mainegeo.patterns", "qualname": "PLURAL_PATTERN", "kind": "variable", "doc": "<p></p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;\\\\bTWPS\\\\b&#x27;)"}, {"fullname": "mainegeo.patterns.SINGULAR_PATTERN", "modulename": "mainegeo.patterns", "qualname": "SINGULAR_PATTERN", "kind": "variable", "doc": "<p></p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;\\\\bTWP\\\\b&#x27;)"}, {"fullname": "mainegeo.patterns.MULTI_COUNTY_PATTERN", "modulename": "mainegeo.patterns", "qualname": "MULTI_COUNTY_PATTERN", "kind": "variable", "doc": "<p>Matches raw, unformatted unspecified groups that contain a county.</p>\n\n<h6 id=\"capture-groups\">Capture groups:</h6>\n\n<blockquote>\n  <ul>\n  <li>regtown</li>\n  <li>cty</li>\n  <li>sos_flag</li>\n  </ul>\n</blockquote>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;(?i)(?P&lt;regtown&gt;MILLINOCKET) (?P&lt;cty&gt;YOR|CUM|AND|SAG|LIN|OXF|FRA|KEN|KNO|WAL|PEN|SOM|PIS|HAN|WAS|ARO)\\\\w* (?P&lt;sos_flag&gt;TWPS)&#x27;, re.IGNORECASE)"}, {"fullname": "mainegeo.patterns.MULTI_COUNTY_FORMAT", "modulename": "mainegeo.patterns", "qualname": "MULTI_COUNTY_FORMAT", "kind": "variable", "doc": "<p>Standardized format to apply to all multi-county unspecified groups.</p>\n", "annotation": ": str", "default_value": "&#x27;\\\\g&lt;regtown&gt; \\\\g&lt;sos_flag&gt; [\\\\g&lt;cty&gt;]&#x27;"}, {"fullname": "mainegeo.patterns.FORMATTED_GROUP_PATTERN", "modulename": "mainegeo.patterns", "qualname": "FORMATTED_GROUP_PATTERN", "kind": "variable", "doc": "<p>Matches all formatted unspecified groups, including multi-county groups.</p>\n", "annotation": ": re.Pattern", "default_value": "re.compile(&#x27;UNSPECIFIED (?P&lt;regtown&gt;.+) TWPS( \\\\[(?P&lt;cty&gt;YOR|CUM|AND|SAG|LIN|OXF|FRA|KEN|KNO|WAL|PEN|SOM|PIS|HAN|WAS|ARO)\\\\])?&#x27;, re.IGNORECASE)"}, {"fullname": "mainegeo.townships", "modulename": "mainegeo.townships", "kind": "module", "doc": "<p>Town and township name standardization and parsing utilities.</p>\n\n<p>This module provides functions for parsing and normalizing township names\nand looking up their canonical names.</p>\n\n<p>All functions in this module are intended to be run on a string containing a single \ntown or township, unless specifically indicated otherwise. For help parsing multi-town \nelection reporting units into single town strings, see <code>mainegeo.elections</code>.</p>\n"}, {"fullname": "mainegeo.townships.is_unnamed_township", "modulename": "mainegeo.townships", "qualname": "is_unnamed_township", "kind": "function", "doc": "<p>Check if a string contains an unnamed township.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>town:</strong>  A single town or township</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if input contains an unnamed township, else False</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_unnamed_township</span><span class=\"p\">(</span><span class=\"s1\">&#39;T5 R7&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_unnamed_township</span><span class=\"p\">(</span><span class=\"s1\">&#39;CROSS LAKE TWP (T17 R5)&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_unnamed_township</span><span class=\"p\">(</span><span class=\"s1\">&#39;CROSS LAKE TWP&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">town</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.townships.clean_code", "modulename": "mainegeo.townships", "qualname": "clean_code", "kind": "function", "doc": "<p>Normalize punctuation and spacing of township code and drop text that is not part of the township code.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>town:</strong>  A single town or township</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Normalized township string, or unmodified string if input does not contain township</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clean_code</span><span class=\"p\">(</span><span class=\"s1\">&#39;T4/R3 TWP&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;T4 R3&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clean_code</span><span class=\"p\">(</span><span class=\"s1\">&#39;T10SD&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;T10 SD&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clean_code</span><span class=\"p\">(</span><span class=\"s1\">&#39;CROSS LAKE TWP (T17 R5)&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;T17 R5&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">town</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.townships.clean_codes", "modulename": "mainegeo.townships", "qualname": "clean_codes", "kind": "function", "doc": "<p>Normalize punctation and spacing of township codes in-place.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>towns:</strong>  String with one or more towns or townships</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Input string with punctuation and spacing normalized for all township codes</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clean_codes</span><span class=\"p\">(</span><span class=\"s1\">&#39;ASHLAND -- T12/R13, T9/R8&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;ASHLAND -- T12 R13, T9 R8&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clean_codes</span><span class=\"p\">(</span><span class=\"s1\">&#39;T4/R3 TWP&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;T4 R3 TWP&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clean_codes</span><span class=\"p\">(</span><span class=\"s1\">&#39;BARNARD TWP/EBEEMEE TWP (T5-R9 NWP)/T4R9 NWP TWP&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;BARNARD TWP/EBEEMEE TWP (T5 R9 NWP)/T4 R9 NWP TWP&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">towns</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.townships.has_alias", "modulename": "mainegeo.townships", "qualname": "has_alias", "kind": "function", "doc": "<p>Check if input has both an unnamed township and a township alias.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>town:</strong>  A single town or township</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if town string contains a township code and alias, else False</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">has_alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;CROSS LAKE TWP (T17 R5)&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">has_alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;EBEEMEE TWP&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">has_alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;PRENTISS TWP T7 R3 NBPP&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">has_alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;T7 R3 NBPP TWP&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">town</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.townships.extract_alias", "modulename": "mainegeo.townships", "qualname": "extract_alias", "kind": "function", "doc": "<p>Extract the township alias from a string that contains both an alias and a code.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>town:</strong>  A single town or township</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Input string with township code removed.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;CROSS LAKE TWP (T17 R5)&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;CROSS LAKE TWP&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;T3 Indian Purchase Twp&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Indian Purchase Twp&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;Rockwood Strip (T1 R1) Twp&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Rockwood Strip Twp&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;T7 R3 NBPP (PRENTISS TWP)&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;PRENTISS TWP&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">town</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.townships.clean_township", "modulename": "mainegeo.townships", "qualname": "clean_township", "kind": "function", "doc": "<p>Normalize punctuation and spacing of township code and alias.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>town:</strong>  A single town or township</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Normalized township string, or unmodified string if input does not contain township</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clean_township</span><span class=\"p\">(</span><span class=\"s1\">&#39;T4/R3 TWP&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;T4 R3&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clean_township</span><span class=\"p\">(</span><span class=\"s1\">&#39;T10SD&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;T10 SD&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clean_township</span><span class=\"p\">(</span><span class=\"s1\">&#39;CROSS LAKE TWP (T17 R5)&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;CROSS LAKE TWP T17 R5&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">town</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.townships.strip_region", "modulename": "mainegeo.townships", "qualname": "strip_region", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">town</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.townships.strip_suffix", "modulename": "mainegeo.townships", "qualname": "strip_suffix", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">town</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.townships.toggle_suffix", "modulename": "mainegeo.townships", "qualname": "toggle_suffix", "kind": "function", "doc": "<p>Adds or removes a township suffix to grants, gores, and islands.</p>\n\n<p>The TWP suffix is not canonical for all grants, gores, and islands.\nThis function is used to generate plausible aliases for further testing.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>town:</strong>  A single town or township</li>\n<li><strong>town_type:</strong>  A TownType object. If provided, will increase accuracy.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Gore, grant or island with township suffix added or removed, or else town</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">toggle_suffix</span><span class=\"p\">(</span><span class=\"s1\">&#39;MOXIE GORE TWP&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;MOXIE GORE&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">toggle_suffix</span><span class=\"p\">(</span><span class=\"s1\">&#39;HOPKINS ACADEMY GRANT&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;HOPKINS ACADEMY GRANT TWP&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">toggle_suffix</span><span class=\"p\">(</span><span class=\"s1\">&#39;LOUDS ISLAND&#39;</span><span class=\"p\">,</span> <span class=\"n\">TownType</span><span class=\"o\">.</span><span class=\"n\">UNORGANIZED</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;LOUDS ISLAND TWP&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">toggle_suffix</span><span class=\"p\">(</span><span class=\"s1\">&#39;CHEBEAGUE ISLAND&#39;</span><span class=\"p\">,</span> <span class=\"n\">TownType</span><span class=\"o\">.</span><span class=\"n\">TOWN</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;CHEBEAGUE ISLAND&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">town</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">town_type</span><span class=\"p\">:</span> <span class=\"n\">mainegeo</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">TownType</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.townships.normalize_suffix", "modulename": "mainegeo.townships", "qualname": "normalize_suffix", "kind": "function", "doc": "<p>Normalize variations in geotype suffix abbreviation and location.</p>\n\n<p>Does not alter pluralization.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>town:</strong>  A single town or township</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Town with normalized suffix</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">normalize_suffix</span><span class=\"p\">(</span><span class=\"s1\">&#39;City of Portland&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Portland&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">normalize_suffix</span><span class=\"p\">(</span><span class=\"s1\">&#39;MATINICUS ISLE PLANTATION&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;MATINICUS ISLE PLT&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">town</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.townships.strip_town", "modulename": "mainegeo.townships", "qualname": "strip_town", "kind": "function", "doc": "<p>Strip invalid punctuation and whitespace from a town name substring.</p>\n\n<h6 id=\"this-function-performs-the-following-operations\">This function performs the following operations:</h6>\n\n<blockquote>\n  <ol>\n  <li>Strip leading and trailing whitespace and squish internal whitespace</li>\n  <li>Replace '&amp;' characters that are recognized as part of a canonical town\n  name with 'and'</li>\n  <li>Strip all punctuation except '-' characters that are recognized as \n  part of a canonical town name</li>\n  </ol>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>town:</strong>  A single town or township</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Town name with punctuation stripped</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">strip_town</span><span class=\"p\">(</span><span class=\"s2\">&quot;Loud&#39;s Island&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Louds Island&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">strip_town</span><span class=\"p\">(</span><span class=\"s1\">&#39;Dover-Foxcroft &#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Dover-Foxcroft&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">strip_town</span><span class=\"p\">(</span><span class=\"s1\">&#39;Taunton &amp; Raynham Academy Grant&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Taunton and Raynham Academy Grant&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">town</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mainegeo.townships.clean_town", "modulename": "mainegeo.townships", "qualname": "clean_town", "kind": "function", "doc": "<p>Clean and format town name. </p>\n\n<h6 id=\"operations-performed\">Operations performed:</h6>\n\n<blockquote>\n  <ol>\n  <li>Strip or replace punctuation</li>\n  <li>Normalize whitespace</li>\n  <li>Abbreviate geotype suffixes</li>\n  <li>Normalize township codes</li>\n  </ol>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>town:</strong>  A single town or township</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Town name with punctuation stripped and formatting applied</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clean_town</span><span class=\"p\">(</span><span class=\"s1\">&#39;City of Portland&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Portland&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clean_town</span><span class=\"p\">(</span><span class=\"s1\">&#39;T8/R11 TWP&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;T8 R11&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clean_town</span><span class=\"p\">(</span><span class=\"s1\">&#39;CROSS LAKE TWP (T17 R5)&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;CROSS LAKE TWP T17 R5&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clean_town</span><span class=\"p\">(</span><span class=\"s1\">&#39;King &amp; Bartlett Township&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;King and Bartlett Twp&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">town</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();